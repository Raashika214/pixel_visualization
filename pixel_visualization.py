# -*- coding: utf-8 -*-
"""
/***************************************************************************
 pixelVisualization
                                 A QGIS plugin
 Plugin for visualizing which is previously saved data usinig pixel selection plugin in QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-05-30
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Edula Raashika
        email                : edularaashika@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .pixel_visualization_dialog import pixelVisualizationDialog
import os.path
from qgis.gui import QgsMapToolEmitPoint,QgsMapToolPan,QgsMapCanvas,QgsMapCanvasItem
from qgis.core import QgsPointXY,QgsProject, QgsPoint, QgsVector, QgsAnnotationLayer, QgsAnnotationPointTextItem, QgsAnnotationMarkerItem
import csv
import matplotlib.pyplot as plt
import pandas as pd
import os



class pixelVisualization:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'pixelVisualization_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Pixel Visualization')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('pixelVisualization', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/pixel_visualization/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        self.xticks = []
        self.plotLabelfile = False



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Pixel Visualization'),
                action)
            self.iface.removeToolBarIcon(action)

    def openFile(self):
        self.openFilename = QFileDialog.getOpenFileName(self.dlg,'Select the file to load',"",'*.csv')
        self.dlg.openFileLineEdit.setText(str(self.openFilename[0]))
        # print("load file name: ", self.openFilename)

    def readFromFile(self):
        self.openFileName = self.dlg.openFileLineEdit.text()
        if self.openFileName == '':
            self.openFile()
        self.xPoint = []
        self.yPoint = []
        self.xyNote = []
        self.bands = []

        with open(self.openFileName, 'r', newline='', encoding='utf-8') as openfile:
            reader = csv.reader(openfile, delimiter=',')
            for row in reader:
                self.xPoint.append(float(row[0]))
                self.yPoint.append(float(row[1]))
                self.xyNote.append(row[2])
        for i in range(len(self.xPoint)):
            self.pointIndex = i
            self.comboUpdate()

        self.dataframe = pd.read_csv(self.dlg.openFileLineEdit.text(), sep=',', header=None,index_col=None)
        # print(self.dataframe)
        self.dataframe2 = self.dataframe
        self.dataframe = self.dataframe.iloc[:, 4:-1]
        self.dataframe = self.dataframe.T.reset_index(drop=True).T
        self.band_count = [*range(1, self.dataframe.shape[1] + 1, 1)]

        self.push_message("File opened")

    def comboUpdate(self):
        self.dlg.XYComboBox.addItem(
            "Pixel" + str(self.pointIndex + 1) + " X: " + str(self.xPoint[self.pointIndex]) + " Y: " + str(
                self.yPoint[self.pointIndex]))

    def plotLabelFile(self):
        self.plotLabelFilename = QFileDialog.getOpenFileName(self.dlg,"Select file to open","")
        self.dlg.plotLabelLine.setText(self.plotLabelFilename[0])
        # print(self.plotLabelFilename)
        self.plotLabelfile = self.dlg.plotLabelLine.text()

    def openplotLabelFile(self):
        if self.plotLabelfile:
            with open(self.plotLabelfile, 'r', newline='', encoding='utf-8') as infile:
                reader = csv.reader(infile, delimiter=',')
                for row in reader:
                    for label in row:
                        self.xticks.append(float(label))
        else:
            self.xticks = [415.0, 750.0 , 900.0, 950.0, 1000.0 , 1000.0, 1050.0 , 1250.0 , 1550.0]


    def boxPlot(self):
        # print(self.dataframe)
        plt.close()
        self.dataframe.plot(kind='box')
        plt.ion()
        # print(self.band_count)
        plt.xticks(self.band_count, self.xticks)
        plt.xlabel("Wavelength (nm)")
        plt.show()

    def linePlotGraph(self):
        plt.close()
        self.boxPlot()
        self.pointIndex = self.dlg.XYComboBox.currentIndex()
        band_data = list(self.dataframe.iloc[self.pointIndex, :])
        # band_data.insert(0,np.nan)
        # print(band_data,type(band_data))

        # print("band count: ", self.band_count, "band data", band_data)
        # print(len(self.band_count), len(band_data))
        # print(self.dataframe.iloc[self.pointIndex, :])

        plt.ion()
        # plt.clf()
        plt.plot(self.band_count, band_data)

        plt.xticks(self.band_count, self.xticks)
        # print(self.band_count,self.xticks)
        plt.xlabel("Wavelength (nm)")

        # plt.xticks( self.band_count)
        plt.show()

    def deletePixel(self):
        index = self.dlg.XYComboBox.currentIndex()
        self.dlg.XYComboBox.removeItem(index)
        self.dataframe2.drop(self.dataframe2.index[index],inplace=True)
        # print(self.dataframe2)
        os.remove(self.openFilename[0])
        self.dataframe2.to_csv(self.openFilename[0],header=None)
        plt.close()
        self.boxPlot()



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = pixelVisualizationDialog()

        # show the dialog
        self.dlg.show()
        self.dlg.openFileSelect.clicked.connect(self.openFile)
        self.dlg.openFileButton.clicked.connect(self.readFromFile)
        self.dlg.boxPlot.clicked.connect(self.boxPlot)
        self.dlg.linePlot.clicked.connect(self.linePlotGraph)
        self.dlg.deletePixel.clicked.connect(self.deletePixel)
        self.dlg.plotLabelSelect.clicked.connect(self.plotLabelFile)
        self.dlg.plotLabelButton.clicked.connect(self.openplotLabelFile)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    def push_message(self,message):
        self.iface.messageBar().pushMessage(message)
